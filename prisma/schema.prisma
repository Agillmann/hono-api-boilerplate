generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String       @db.Text
  email         String       @unique
  emailVerified Boolean
  image         String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  role          String       @default("user")
  banned        Boolean      @default(false)
  banReason     String?      @db.Text
  banExpires    DateTime?
  accounts      Account[]
  invitations   Invitation[]
  memberships   member[]
  sessions      Session[]
  teams         TeamMember[]

  @@map("user")
}

model Session {
  id                   String   @id @default(cuid())
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?  @db.Text
  userAgent            String?  @db.Text
  userId               String
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "session_userId_fkey")
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "account_userId_fkey")
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Organization {
  id          String       @id @default(cuid())
  name        String       @db.Text
  slug        String       @unique @db.VarChar(255)
  logo        String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  metadata    Json?
  invitations Invitation[]
  members     member[]
  teams       Team[]

  @@map("organization")
}

model member {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId], map: "organization_member_userId_fkey")
  @@map("organization_member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  email          String       @db.VarChar(255)
  role           String       @default("member")
  inviterId      String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  inviter        User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@index([inviterId], map: "invitation_inviterId_fkey")
  @@map("invitation")
}

model Team {
  id             String       @id @default(cuid())
  name           String       @db.Text
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TeamMember[]

  @@index([organizationId], map: "team_organizationId_fkey")
  @@map("team")
}

model TeamMember {
  id     String @id @default(cuid())
  teamId String
  userId String
  role   String @default("member")
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId], map: "team_member_userId_fkey")
  @@map("team_member")
}
